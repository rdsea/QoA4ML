import requests, time
from threading import Thread
import os, random, json
import numpy as np
import pandas as pd
from qoa4ml.reports import Qoa_Client
import qoa4ml.utils as qoa_utils


def init_env_variables():
    # Get Pod ID: for monitoring
    pod_id = os.environ.get("POD_ID")
    if not pod_id:
        print("POD_ID is not defined")
        pod_id = "Empty"
    # Get Node name: for monitoring
    node_name = os.environ.get("NODE_NAME")
    if not node_name:
        print("NODE_NAME is not defined")
        node_name = "Empty"
    # Get Number of thread
    num_thread = os.environ.get("NUM_THREAD")
    if not num_thread:
        print("NUM_THREAD is not defined")
        num_thread = 5
    # Get sleep time
    time_sleep = os.environ.get("TIME_SLEEP")
    if not time_sleep:
        print("DATABASE_NAME is not defined")
        time_sleep = 0
    # Get user collection name
    service_url = os.environ.get("SERVICE_URL")
    if not service_url:
        print("SERVICE_URL is not defined")
        service_url = "http://0.0.0.0:8111/"
    # Get configuration file
    conf_file = os.environ.get("CONF_FILE")
    if not conf_file:
        print("CONF_FILE is not defined")
        conf_file = "/conf.json"

    return {
        "pod_id": pod_id,
        "node_name": node_name,
        "num_thread": num_thread,
        "time_sleep": time_sleep,
        "service_url": service_url,
        "conf_file": conf_file,
    }


env_var = init_env_variables()

concurrent = int(env_var["num_thread"])
time_sleep = float(env_var["time_sleep"])
url = str(env_var["service_url"])
conf_file = env_var["conf_file"]
config_path = os.path.dirname(os.path.abspath(__file__))
configuration = qoa_utils.load_config(config_path + conf_file)
client_config = configuration["client_config"]
connector_conf = configuration["connector_conf"]


client_qoa = Qoa_Client(client_config, connector_conf)
client_conf = configuration["client_app"]
client_qoa.init_report(
    client_conf["instance_id"], client_conf["method"], client_conf["stage_id"]
)

df_test1 = pd.read_csv(configuration["data"], encoding="utf-8", error_bad_lines=False)
print("Data Length: ", len(df_test1.index))
df_test2 = pd.read_csv(configuration["data2"], encoding="utf-8", error_bad_lines=False)
print("Data Length: ", len(df_test2.index))


def sender(num_thread):
    count = 0
    error = 0
    start_time = time.time()
    while time.time() - start_time < 600:
        # try:
        print("This is thread: ", num_thread, "Starting request: ", count)
        while True:
            f_rand = random.randint(0, 100)
            if f_rand < 50:
                df_test = df_test1
            else:
                df_test = df_test2
            r_index = random.randint(0, len(df_test.index))
            row_data = df_test.iloc[[r_index]].to_dict(orient="records")[0]
            # print(row_data)
            label = row_data["label"]
            # if time_sleep == -1:
            #     time.sleep(1)
            # else:
            #     time.sleep(time_sleep)
            files = {
                "data": json.dumps(row_data).encode("utf-8"),
                "user_data": json.dumps(client_config).encode("utf-8"),
            }
            time_start = time.time()
            response = requests.post(url, files=files)
            responsetime = time_start, time.time() - time_start
            prediction = response.json()
            keys = list(prediction.keys())
            result = prediction[keys[0]]
            if result["value"] != label:
                client_qoa.ex_observe_accuracy(prediction, 0)
                report = client_qoa.report_external(responsetime, True)
                print(report)
                print("False Prediction: ", result["value"], "- True lable: ", label)
            else:
                prob = random.randint(0, 100)
                if prob < configuration["feedback_freq"]:
                    client_qoa.ex_observe_accuracy(prediction, 1)
                    report = client_qoa.report_external(responsetime, True)
                    print(report)
            # image = np.asarray((prediction["image"]))
            print("Thread - ", num_thread, "Row - ", r_index, " Response:")
            count += 1

    # except Exception as e:
    #     error +=1
    #     print("[Error]: ", e)


for i in range(concurrent):
    t = Thread(target=sender, args=[i])
    t.start()
