import argparse, json
import time
import pandas as pd
import numpy as np
import pickle, os


class Malware_Detector:
    """
    Load model of input model_filename.

        Parameters:
            model_filename (str): filename of model to be tested
            threshold (float): threshold set for classification;
                               if None, use default threshold of 0.5
            classes (list): names of class label names

    """

    def __init__(self, param):
        # Load model
        self.path = os.path.dirname(os.path.abspath(__file__))
        self.model_name = self.path + "/model/" + param["model_name"] + ".pkl"
        print("[INFO]   Load {} model.".format(param["model_name"]))
        self.model = None
        with open(self.model_name, "rb") as model_file:
            self.model = pickle.load(model_file)
        if "classes" in param:
            self.classes = param["classes"]
        else:
            self.classes = ["Benign", "Malign"]
        if "threshold" in param:
            self.threshold = param["threshold"]
        else:
            self.threshold = None

    def predict(self, x_test):
        y_prob = self.model.predict_proba(x_test)
        if self.threshold:
            threshold = abs(self.threshold)
            print("[INFO]   Threshold set: {}.".format(threshold))
            y_pred = y_prob[:, 1] > threshold
        else:
            y_pred = self.model.predict(x_test)
        pred = int(y_pred[0])
        confident = y_prob[0].tolist()[pred]
        return pred, confident


if __name__ == "__main__":
    args = argparse.ArgumentParser(description="Testing of api-args models.")
    args.add_argument(
        "--data",
        type=str,
        default="../../virus_detection/model/data/split_data/CLAM/ember/output_1.csv",
        help="data file",
    )
    ag = args.parse_args()
    path = os.path.dirname(__file__)
    data = ag.data
    conf = {"model_name": "ember_clam1", "method": 2}
    model = Malware_Detector(conf)
    df_test = pd.read_csv(data, encoding="utf-8", error_bad_lines=False)

    for index, row in df_test.iterrows():
        row_data = row.to_dict()
        print(row)
        model.predict(row_data)
        time.sleep(1)
