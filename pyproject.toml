[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "qoa4ml"
version = "0.2.9"
description = "Quality of Analysis for Machine Learning"
readme = "README.md"
authors = ["AaltoSEA <tri.m.nguyen@aalto.fi>"]
license = "Apache-2.0"
packages = [{ include = "qoa4ml", from = "src" }]
homepage = "https://rdsea.github.io/"
keywords = ["Monitoring", "Machine Learning"]
repository = "https://github.com/rdsea/QoA4ML"
documentation = "https://rdsea.github.io/QoA4ML/"
classifiers = [
  "License :: OSI Approved :: Apache Software License",
  "Development Status :: 3 - Alpha",
  "Programming Language :: Python :: 3.10",
]

[tool.poetry.dependencies]
python = ">=3.10.0,<3.11"
pika = ">=1.3.2"
psutil = ">=5.9.2"
PyYAML = ">=6.0.1"
requests = ">=2.31.0"
fastapi = ">=0.110.2"
flatten_dict = ">=0.4.2"
pydantic = ">=2.7.4,<2.8"
tinyflux = ">=1.0.0"
uvicorn = ">=0.29.0"
lazy-import = ">=0.2.2"
confluent-kafka = "^2.4.0"
docker_py = "1.10.6"
numpy = ">=1.23.5"
pandas = ">=1.4.3"

paho_mqtt = { version = "1.6.1", optional = true }
Pillow = { version = "10.0.0", optional = true }
prometheus-client = { version = "0.16.0", optional = true }
tensorflow = { version = "2.10.0", optional = true }
# ydata-quality = { version = "0.1.0", optional = true }


[tool.poetry.group.dev.dependencies]
mkdocs-material = { version = "*", extras = ["imaging"] }
pre-commit = "*"
devtools = "*"
poetry = "*"
ruff = "*"
codespell = "^2.3.0"

[tool.poetry.extras]
ml = [
  "paho_mqtt",
  "Pillow",
  "prometheus-client",
  "tensorflow",
  # "ydata-quality",
]

[tool.ruff]
exclude = ["src/qoa4ml/utils/pynvml_forked.py"]

[tool.ruff.lint]
select = [
  "F", # Pyflakes
  # "PL",  # Pylint convention
  "E",   # Pycode styles
  "W",   # Pycode styles
  "N",   # Pep8 naming
  "I",   # Isort,
  "UP",  # Pyupgrade
  "C4",  # Flake8 compehension
  "ISC", # Flake8 implicit str concat
  "B",   # Flake8 bugbear
  "PGH", # Pygrep hook
  "RUF", # Ruff specific rules
]
ignore = [
  "E501",   # Line too long
  "RET504", # Unnecessary assignment
  "RET505", # Unnecessary else after return
  "C901",   # Too complex function
  "B904",   # raise-without-from-inside-except, enable when understand more
  "PLR",
  "ISC001",
]

[tool.ruff.lint.pylint]
max-args = 10
